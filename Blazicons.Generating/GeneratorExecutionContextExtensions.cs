using System.Text;
using Blazicons.Generating.Internals;
using CodeCasing;
using Microsoft.CodeAnalysis;

namespace Blazicons.Generating;

public static class GeneratorExecutionContextExtensions
{
    public static readonly string[] ExcludedAttributes = ["class", "xmlns"];

    public static void WriteIconsClass(
        this GeneratorExecutionContext context,
        string className,
        string svgFolder,
        string searchPattern = "*.svg",
        Func<string, string>? propertyNameFromFileName = null,
        Func<string, bool>? isFileNameOk = null,
        bool skipColorScrub = false
        )
    {
        var files = Directory.GetFiles(svgFolder, searchPattern, SearchOption.AllDirectories);

        if (isFileNameOk is not null)
        {
            files = [.. files.Where(x => isFileNameOk(x)).OrderBy(x => x.ToLowerInvariant())];
        }
        
        var content = Generate(className, files.Select(f => (f, File.ReadAllText(f))), propertyNameFromFileName ?? GetMemberName, skipColorScrub);

        context.AddSource($"{className}.g.cs", content);
    }

    public static void WriteIconsClass(
        this SourceProductionContext context,
        string className,
        IEnumerable<(string fileName, string content)> svgContents,
        Func<string, string>? propertyNameFromFileName = null,
        bool skipColorScrub = false
        )
    {
        var content = Generate(className, svgContents, propertyNameFromFileName ?? GetMemberName, skipColorScrub);

        context.AddSource($"{className}.g.cs", content);
    }


    private static string Generate(
        string className,
        IEnumerable<(string fileName, string content)> svgContents,
        Func<string, string> propertyNameFromFileName,
        bool skipColorScrub = false
        )
    {
        var attributesCollection = new AttributesCollection();

        var builder = new StringBuilder();

        builder.AppendLine("// <autogenerated/>");
        builder.AppendLine("using System.Collections.ObjectModel;");
        builder.AppendLine("namespace Blazicons;"); // Use Target Namespace
        builder.AppendLine("/// <summary>");
        builder.AppendLine($"/// Provides icons from the {className} library.");
        builder.AppendLine("/// </summary>");
        builder.AppendLine($"public static class {className}");
        builder.AppendLine("{");

        var propertyNames = new List<string>();
        var iconMembersBuilder = new StringBuilder();
        foreach (var (fileName, content) in svgContents)
        {
            var svgDoc = new SvgDocument(content);
            svgDoc.Scrub(skipColorScrub);
            var attributes = svgDoc.GetAttributes();
            foreach (var exclude in ExcludedAttributes)
            {
                attributes.Remove(exclude);
            }

            var attributesIndex = attributesCollection.FindOrAdd(attributes);
            var svgContent = svgDoc.SvgNode.InnerHtml.Replace("\"", "\\\"");
            var svgContentOneLine = svgContent.Replace("\r", "").Replace("\n", "");

            var propertyName = ScrubPropertyName(propertyNameFromFileName(fileName));
            propertyNames.Add(propertyName);
            iconMembersBuilder.AppendLine("/// <summary>");
            iconMembersBuilder.AppendLine($"/// Gets the {propertyName} SvgIcon from the {className} library.");
            iconMembersBuilder.AppendLine("/// </summary>");
            iconMembersBuilder.Append("public static ");
            if (propertyName == "Equals")
            {
                iconMembersBuilder.Append("new ");
            }
            iconMembersBuilder.AppendLine($"SvgIcon {propertyName} => SvgIcon.FromContent(\"{svgContentOneLine.Trim()}\", attributeSet{attributesIndex});");
        }

        builder.AppendLine(attributesCollection.ToCSharp());
        builder.AppendLine();
        builder.AppendLine(iconMembersBuilder.ToString());
        builder.AppendLine("}");
        return builder.ToString();
    }

    private static string ScrubPropertyName(string name)
    {
        var result = name;

        switch (result[0])
        {
            case '1':
                result = $"One{result.Substring(1)}";
                break;

            case '2':
                result = $"Two{result.Substring(1)}";
                break;

            case '3':
                result = $"Three{result.Substring(1)}";
                break;

            case '4':
                result = $"Four{result.Substring(1)}";
                break;

            case '5':
                result = $"Five{result.Substring(1)}";
                break;

            case '6':
                result = $"Six{result.Substring(1)}";
                break;

            case '7':
                result = $"Seven{result.Substring(1)}";
                break;

            case '8':
                result = $"Eight{result.Substring(1)}";
                break;

            case '9':
                result = $"Nine{result.Substring(1)}";
                break;

            case '0':
                result = $"Zero{result.Substring(1)}";
                break;

            default:
                break;
        }

        return result;
    }

    private static string GetMemberName(string fileName)
        => Path.GetFileNameWithoutExtension(fileName).ToPascalCase();
}